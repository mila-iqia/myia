"""Abstract Types for PyTorch Frontend."""

from ..abstract.data import ANYTHING, SHAPE, AbstractArray, AbstractClassBase


class AbstractModule(AbstractClassBase):
    """Represents a PyTorch Module."""

    def user_defined_version(self):
        """Return the user-defined version of this type.

        This uses the attribute types as defined by the user, rather than what
        is generated by the inferrer or other methods.

        Current default is to return self in order to make it easier for Myia
        hypermap mapping function to return a different type from its input
        (especially for pytorch modules and their contents).
        """
        return self


class AbstractPyTorchTensor(AbstractArray):
    """Represents a PyTorch Tensor."""

    def __init__(self, element, values):
        """Initialize an AbstractPyTorchTensor."""
        super().__init__(element, values)


APT = AbstractPyTorchTensor(ANYTHING, {SHAPE: ANYTHING})
