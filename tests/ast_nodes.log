~ AST(object) (_ast)
	* operator(AST) (_ast)
		* Add(operator) (_ast)
		* BitAnd(operator) (_ast)
		* BitOr(operator) (_ast)
		* BitXor(operator) (_ast)
		* Div(operator) (_ast)
		* FloorDiv(operator) (_ast)
		* LShift(operator) (_ast)
		* MatMult(operator) (_ast)
		* Mod(operator) (_ast)
		* Mult(operator) (_ast)
		* Pow(operator) (_ast)
		* RShift(operator) (_ast)
		* Sub(operator) (_ast)
	x alias(AST) (_ast)
	* boolop(AST) (_ast)
		* And(boolop) (_ast)
		* Or(boolop) (_ast)
	~ stmt(AST) (_ast)
		* AnnAssign(stmt) (_ast)
		* Assert(stmt) (_ast)
		* Assign(stmt) (_ast)
		x AsyncFor(stmt) (_ast)
		x AsyncFunctionDef(stmt) (_ast)
		x AsyncWith(stmt) (_ast)
		x AugAssign(stmt) (_ast)
		* Break(stmt) (_ast)
		x ClassDef(stmt) (_ast)
		* Continue(stmt) (_ast)
		x Delete(stmt) (_ast)
		* Expr(stmt) (_ast)
		* For(stmt) (_ast)
		* FunctionDef(stmt) (_ast)
		* Global(stmt) (_ast)
		* If(stmt) (_ast)
		x Import(stmt) (_ast)
		x ImportFrom(stmt) (_ast)
		* Nonlocal(stmt) (_ast)
		* Pass(stmt) (_ast)
		x Raise(stmt) (_ast)
		* Return(stmt) (_ast)
		x Try(stmt) (_ast)
		* While(stmt) (_ast)
		x With(stmt) (_ast)
	* arg(AST) (_ast)
	* arguments(AST) (_ast)
	~ expr(AST) (_ast)
		* Attribute(expr) (_ast)
		x Await(expr) (_ast)
		* BinOp(expr) (_ast)
		* BoolOp(expr) (_ast)
		* Call(expr) (_ast)
		* Compare(expr) (_ast)
		* Constant(expr) (_ast)
			* Num(Constant) (ast)
			* Str(Constant) (ast)
			* Bytes(Constant) (ast)
			* NameConstant(Constant) (ast)
			* Ellipsis(Constant) (ast)
		* Dict(expr) (_ast)
		x DictComp(expr) (_ast)
		~ FormattedValue(expr) (_ast) -> JoinedStr
		x GeneratorExp(expr) (_ast)
		* IfExp(expr) (_ast)
		x JoinedStr(expr) (_ast)
		* Lambda(expr) (_ast)
		* List(expr) (_ast)
		x ListComp(expr) (_ast)
		* Name(expr) (_ast)
		x NamedExpr(expr) (_ast)
		x Set(expr) (_ast)
		x SetComp(expr) (_ast)
		x Starred(expr) (_ast)
		* Subscript(expr) (_ast)
		* Tuple(expr) (_ast)
		* UnaryOp(expr) (_ast)
		x Yield(expr) (_ast)
		x YieldFrom(expr) (_ast)
	? expr_context(AST) (_ast) -> as contexts in Assign and AugAssign ?
		AugLoad(expr_context) (_ast)
		AugStore(expr_context) (_ast)
		Del(expr_context) (_ast)
		Load(expr_context) (_ast)
		Param(expr_context) (_ast)
		Store(expr_context) (_ast)
	* cmpop(AST) (_ast)
		* Eq(cmpop) (_ast)
		* Gt(cmpop) (_ast)
		* GtE(cmpop) (_ast)
		* In(cmpop) (_ast)
		* Is(cmpop) (_ast)
		* IsNot(cmpop) (_ast)
		* Lt(cmpop) (_ast)
		* LtE(cmpop) (_ast)
		* NotEq(cmpop) (_ast)
		* NotIn(cmpop) (_ast)
	~ comprehension(AST) (_ast) -> in comprehensions
	~ excepthandler(AST) (_ast)
		~ ExceptHandler(excepthandler) (_ast) -> in Try blocks
	~ mod(AST) (_ast)
		? Expression(mod) (_ast)
		? FunctionType(mod) (_ast)
		- Interactive(mod) (_ast)
		- Module(mod) (_ast)
		- Suite(mod) (_ast) # not really an actual node but useful in Jython's typesystem.
	* slice(AST) (_ast)
		* ExtSlice(slice) (_ast)
		* Index(slice) (_ast)
		* Slice(slice) (_ast)
	* unaryop(AST) (_ast)
		* Invert(unaryop) (_ast)
		* Not(unaryop) (_ast)
		* UAdd(unaryop) (_ast)
		* USub(unaryop) (_ast)
	* keyword(AST) (_ast) -> in Call
	? type_ignore(AST) (_ast)
		? TypeIgnore(type_ignore) (_ast)
	~ withitem(AST) (_ast) -> in with statements
